#include "stm32f405xx.h"
#include "lcd.h"
#include <string.h>
#include <stdbool.h>
 
 
//---------------------------------------------------------
// Security (Keypad & LCD) configuration
//---------------------------------------------------------
char passkey[5] = "2580";
char entered[5] = "";
char keypad_map[4][4] = {
   {'1', '2', '3', 'A'},
   {'4', '5', '6', 'B'},
   {'7', '8', '9', 'C'},
   {'*', '0', '#', 'D'}
};
 
//---------------------------------------------------------
// TM1637 & LED configuration
//---------------------------------------------------------
#define TM1637_A_CLK_PIN     6   // PC6
#define TM1637_A_DIO_PIN     7   // PC7
#define TM1637_B_CLK_PIN     8   // PC8
#define TM1637_B_DIO_PIN     10  // PC10
#define TM1637_PORT          GPIOC
 
#define LEDA_RED     0   // PA2
#define LEDA_YELLOW  1
#define LEDA_GREEN   2
#define LEDB_RED     11
#define LEDB_YELLOW  12
#define LEDB_GREEN   13
#define LED_PORT     GPIOC
 
 
#define SWITCH_PIN   15  // PA15
 
// Sensor 1
#define TRIG_PIN_1    2   // PA2
#define ECHO_PIN_1    3   // PA3
#define LED_PIN_1     0   // PA10
 
// Sensor 2
#define TRIG_PIN_2    4   // PA4
#define ECHO_PIN_2    5   // PA5
#define LED_PIN_2     1   // PA11
 
// Sensor 3
#define TRIG_PIN_3    6   // PA6
#define ECHO_PIN_3    7   // PA7
#define LED_PIN_3     0   // PA12
 
// Sensor 4
#define TRIG_PIN_4    8   // PA8
#define ECHO_PIN_4   9   // PA9
#define LED_PIN_4    1   // PA13
 
#define DISTANCE_THRESHOLD 1749  // ~30 cm (in microseconds)
#define TIMEOUT_US 30000         // Timeout for echo wait
 
int sensor_1=0;
int sensor_2=0;
int sensor_3=0;
int sensor_4=0;
 
int vehicle_lane_1=0;
int vehicle_lane_2=0;
 
int extraA = 0;
int extraB = 0;
 
 
int diff;
int greenA = 5, greenB = 5;
int yellowA = 2, yellowB = 2;
int redA = 7, redB = 7;
 
int timerA = 0, timerB = 0;
int stateA = 0, stateB = 2;  // A starts GREEN, B starts RED
bool cycle_complete = false;
 
 
 
 
 
 
 
 
const uint8_t digit_to_segment[] = {
   0x3F, 0x06, 0x5B, 0x4F,
   0x66, 0x6D, 0x7D, 0x07,
   0x7F, 0x6F
};
 
//---------------------------------------------------------
// Delay functions
//---------------------------------------------------------
void delay_us(uint32_t us) {
   volatile uint32_t count = us * 16;
   while (count--) __asm volatile ("nop");
}
 
void delay_ms(uint32_t ms) {
   for (uint32_t i = 0; i < ms; i++)
       delay_us(1000);
}
 
void delayms(uint32_t ms) {
   for (uint32_t i = 0; i < ms * 16000; i++);
}
//------------------------------------------------------------------------------------------
//sensor gpio initialization
void Sensor_GPIO_Init(void) {
   RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 
   // Set TRIG and LED pins as output (01)
   GPIOA->MODER &= ~((3 << (TRIG_PIN_1 * 2)) | (3 << (TRIG_PIN_2 * 2)) | (3 << (TRIG_PIN_3 * 2)) | (3 << (TRIG_PIN_4 * 2)) |
                     (3 << (LED_PIN_1 * 2))  | (3 << (LED_PIN_2 * 2))  | (3 << (LED_PIN_3 * 2))  | (3 << (LED_PIN_4 * 2)));
   GPIOA->MODER |=  ((1 << (TRIG_PIN_1 * 2)) | (1 << (TRIG_PIN_2 * 2)) | (1 << (TRIG_PIN_3 * 2)) | (1 << (TRIG_PIN_4 * 2)) |
                     (1 << (LED_PIN_1 * 2))  | (1 << (LED_PIN_2 * 2))  | (1 << (LED_PIN_3 * 2))  | (1 << (LED_PIN_4 * 2)));
 
   // Push-pull outputs
   GPIOA->OTYPER &= ~((1 << TRIG_PIN_1) | (1 << TRIG_PIN_2) | (1 << TRIG_PIN_3) | (1 << TRIG_PIN_4) |
                      (1 << LED_PIN_1)  | (1 << LED_PIN_2)  | (1 << LED_PIN_3)  | (1 << LED_PIN_4));
 
   // Set ECHO pins as input (00)
   GPIOA->MODER &= ~((3 << (ECHO_PIN_1 * 2)) | (3 << (ECHO_PIN_2 * 2)) |
                     (3 << (ECHO_PIN_3 * 2)) | (3 << (ECHO_PIN_4 * 2)));
}
//-----------------------------------------------------------------------------------------------------------------
 
//---------------------------------------------------------
// GPIO Initialization
//---------------------------------------------------------
void gpio_init(void) {
   RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 
   // --- TM1637 pins ---
   int tm_pins[] = {6, 7, 8, 10};
   for (int i = 0; i < 4; i++) {
       int pin = tm_pins[i];
       GPIOC->MODER &= ~(3 << (pin * 2));
       GPIOC->MODER |=  (1 << (pin * 2));
       GPIOC->OTYPER |= (1 << pin);
       GPIOC->ODR |= (1 << pin);
   }
 
   // --- LED pins ---
   int led_pins[]={0,1,2,11,12,13};
   for (int i = 0; i < 7; i++)  {
           int pins = led_pins[i];
       GPIOC->MODER &= ~(3 << (pins * 2));
       GPIOC->MODER |=  (1 << (pins * 2));
       GPIOC->OTYPER &= ~(1 << pins);
   }
 
   // --- Keypad rows ---
   for (int i = 3; i <= 6; i++) {
       GPIOB->MODER &= ~(3 << (i * 2));
       GPIOB->MODER |=  (1 << (i * 2));
       GPIOB->ODR |= (1 << i);
   }
 
   // --- Keypad columns ---
   for (int i = 7; i < 11; i++) {
       GPIOB->MODER &= ~(3 << (i * 2));
       GPIOB->PUPDR &= ~(3 << (i * 2));
       GPIOB->PUPDR |=  (1 << (i * 2));
   }
 
   // --- Switch (PA15) ---
   GPIOA->MODER &= ~(3 << (SWITCH_PIN * 2)); // Input mode
   GPIOA->PUPDR &= ~(3 << (SWITCH_PIN * 2));
   GPIOA->PUPDR |=  (1 << (SWITCH_PIN * 2)); // Pull-up
}
 
 
//timers initialization
//---------------------------------------------------------------------
void TIM_Init_All(void) {
   RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN |
                   RCC_APB1ENR_TIM4EN | RCC_APB1ENR_TIM5EN;
 
   // All timers to 1 MHz (1 us resolution)
   TIM2->PSC = TIM3->PSC = TIM4->PSC = TIM5->PSC = 84 - 1;
   TIM2->ARR = TIM3->ARR = TIM4->ARR = TIM5->ARR = 0xFFFFFFFF;
 
   TIM2->CR1 |= TIM_CR1_CEN;
   TIM3->CR1 |= TIM_CR1_CEN;
   TIM4->CR1 |= TIM_CR1_CEN;
   TIM5->CR1 |= TIM_CR1_CEN;
}
//--------------------------------------------------------------------
//timer delay
//--------------------------------------------
void T_Delay_us(uint32_t us) {
   uint32_t start = TIM2->CNT;
   while ((TIM2->CNT - start) < us);
}
//-----------------------------------------------
 
 
//trigger for sensors
//---------------------------------------------------------
void Trigger_Pulse(uint8_t trig_pin) {
   GPIOA->ODR |= (1 << trig_pin);
   T_Delay_us(12);  // 10 us minimum
   GPIOA->ODR &= ~(1 << trig_pin);
}
//---------------------------------------------------------------
//---------------------------------------------------------
 
//measure echo--------------------------------------------------
uint32_t Measure_Echo_Pulse(uint8_t echo_pin, TIM_TypeDef *TIMx) {
   uint32_t start = 0, end = 0;
   uint32_t timeout = TIMEOUT_US;
 
   // Wait for rising edge
   while (!(GPIOA->IDR & (1 << echo_pin))) {
       if (--timeout == 0) return 0;
   }
   start = TIMx->CNT;
 
   timeout = TIMEOUT_US;
   while ((GPIOA->IDR & (1 << echo_pin))) {
       if (--timeout == 0) return 0;
   }
   end = TIMx->CNT;
 
   return (end >= start) ? (end - start) : (0xFFFFFFFF - start + end);
}
//---------------------------------------------------------------------------
 
// Keypad Scanning
//---------------------------------------------------------
char scan_keypad(void) {
   for (int row = 0; row < 4; row++) {
       GPIOB->ODR |= (0xF << 3);
       GPIOB->ODR &= ~(1 << (row + 3));
       delayms(5);
       for (int col = 0; col < 4; col++) {
           if ((GPIOB->IDR & (1 << (col + 7))) == 0) {
               while ((GPIOB->IDR & (1 << (col + 7))) == 0);
               delayms(5);
               return keypad_map[row][col];
           }
       }
   }
   return 0;
}
 
//---------------------------------------------------------
// TM1637 functions
//---------------------------------------------------------
void TM1637_start(uint8_t clk, uint8_t dio) {
   TM1637_PORT->ODR |= (1 << clk) | (1 << dio);
   delay_us(5);
   TM1637_PORT->ODR &= ~(1 << dio);
   delay_us(5);
}
 
void TM1637_stop(uint8_t clk, uint8_t dio) {
   TM1637_PORT->ODR &= ~(1 << clk);
   delay_us(5);
   TM1637_PORT->ODR &= ~(1 << dio);
   delay_us(5);
   TM1637_PORT->ODR |= (1 << clk);
   delay_us(5);
   TM1637_PORT->ODR |= (1 << dio);
   delay_us(5);
}
 
void TM1637_write_byte(uint8_t clk, uint8_t dio, uint8_t b) {
   for (int i = 0; i < 8; i++) {
       TM1637_PORT->ODR &= ~(1 << clk);
       delay_us(3);
       if (b & 0x01)
           TM1637_PORT->ODR |= (1 << dio);
       else
           TM1637_PORT->ODR &= ~(1 << dio);
       delay_us(3);
       TM1637_PORT->ODR |= (1 << clk);
       delay_us(3);
       b >>= 1;
   }
   TM1637_PORT->MODER &= ~(3 << (dio * 2));
   TM1637_PORT->ODR &= ~(1 << clk);
   delay_us(5);
   TM1637_PORT->ODR |= (1 << clk);
   delay_us(5);
   TM1637_PORT->MODER |= (1 << (dio * 2));
}
 
void TM1637_display_digits(uint8_t clk, uint8_t dio, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) {
   TM1637_start(clk, dio);
   TM1637_write_byte(clk, dio, 0x40);
   TM1637_stop(clk, dio);
 
   TM1637_start(clk, dio);
   TM1637_write_byte(clk, dio, 0xC0);
   TM1637_write_byte(clk, dio, digit_to_segment[d0]);
   TM1637_write_byte(clk, dio, digit_to_segment[d1]);
   TM1637_write_byte(clk, dio, digit_to_segment[d2]);
   TM1637_write_byte(clk, dio, digit_to_segment[d3]);
   TM1637_stop(clk, dio);
 
   TM1637_start(clk, dio);
   TM1637_write_byte(clk, dio, 0x88 | 0x07);
   TM1637_stop(clk, dio);
}
 
void display_seconds(uint8_t clk, uint8_t dio, uint8_t seconds) {
   TM1637_display_digits(clk, dio, 0, 0, seconds / 10, seconds % 10);
}
 
 
 
//-----------------------------------------------------------
 
//---------------------------------------------------------
// LED & Traffic Logic
//---------------------------------------------------------
void set_leds(uint8_t red, uint8_t yellow, uint8_t green, uint8_t offset) {
   uint32_t mask = (7 << offset);
   LED_PORT->ODR = (LED_PORT->ODR & ~mask) |
                   ((!!red) << offset) |
                   ((!!yellow) << (offset + 1)) |
                   ((!!green) << (offset + 2));
}
 
//uint8_t stateA, timerA ;
//uint8_t stateB , timerB ;
 
void reset_traffic_states() {
   set_leds(1, 0, 0, LEDA_RED);
   set_leds(1, 0, 0, LEDB_RED);
   for (int i = 10; i > 0; i--) {
       display_seconds(TM1637_A_CLK_PIN, TM1637_A_DIO_PIN, i);
       display_seconds(TM1637_B_CLK_PIN, TM1637_B_DIO_PIN, i);
       delay_ms(150);
   }
 
   stateA = 0; timerA = 5;
   stateB = 2; timerB = 7;
}
 
void update_trafficA() {
   if (stateA == 0) {  // GREEN
       set_leds(0, 0, 1, LEDA_RED);
       display_seconds(TM1637_A_CLK_PIN, TM1637_A_DIO_PIN, timerA--);
       if (timerA == 0) {
           stateA = 1;
           timerA = yellowA;  // Yellow duration
       }
   } else if (stateA == 1) {  // YELLOW
       set_leds(0, 1, 0, LEDA_RED);
       display_seconds(TM1637_A_CLK_PIN, TM1637_A_DIO_PIN, timerA--);
       if (timerA == 0) {
           stateA = 2;
           timerA = redA;  // Red = Green + Yellow of lane B
       }
   } else {  // RED
       set_leds(1, 0, 0, LEDA_RED);
       display_seconds(TM1637_A_CLK_PIN, TM1637_A_DIO_PIN, timerA--);
       if (timerA == 0) {
           cycle_complete = true;  // Only lane A drives the next cycle
       }
   }
}
 
 
void update_trafficB() {
   if (stateB == 0) {  // GREEN
       set_leds(0, 0, 1, LEDB_RED);
       display_seconds(TM1637_B_CLK_PIN, TM1637_B_DIO_PIN, timerB--);
       if (timerB == 0) {
           stateB = 1;
           timerB = yellowB;
       }
   } else if (stateB == 1) {  // YELLOW
       set_leds(0, 1, 0, LEDB_RED);
       display_seconds(TM1637_B_CLK_PIN, TM1637_B_DIO_PIN, timerB--);
       if (timerB == 0) {
           stateB = 2;
           timerB = redB;
       }
   } else if (stateB == 2) {  // RED
       set_leds(1, 0, 0, LEDB_RED);
       display_seconds(TM1637_B_CLK_PIN, TM1637_B_DIO_PIN, timerB--);
       if (timerB == 0) {
           stateB = 0;  // THIS IS WHAT WAS MISSING!
           timerB = greenB;
       }
   }
}
 
 
 
 
 
 
 
 
//---------------------------------------------------------
// MAIN
//---------------------------------------------------------
int main(void) {
 
           Sensor_GPIO_Init();
           gpio_init();
           TIM_Init_All();
   LcdInit();
 
 
   lprint(0x80, "Welcome");
   while (1) {
       char key = scan_keypad();
       if (key == '*') {
           lprint(0x80, "Input Passkey:");
           int index = 0;
           while (1) {
               key = scan_keypad();
               if (key) {
                   if (key == '#') {
                       entered[index] = '\0';
                       if (strcmp(entered, passkey) == 0) {
                           lprint(0xC0, "Access Granted ");
                           break;
                       } else {
                           lprint(0xC0, "Wrong Passkey!");
                           delayms(150);
                           lprint(0xC0, "Try Again!     ");
                           index = 0;
                       }
                   } else if (index < 4 && key != '*' && key != '#') {
                       entered[index++] = key;
                       char buf[17] = "Entered: ";
                       for (int i = 0; i < index; i++) buf[9 + i] = '*';
                       buf[9 + index] = '\0';
                       lprint(0xC0, buf);
                   }
               }
           }
           break;
       }
   }
 
   reset_traffic_states();
 
   while (1) {
       // Check switch
       if ((GPIOA->IDR & (1 << SWITCH_PIN)) == 0) {
           delay_ms(20); // debounce
           if ((GPIOA->IDR & (1 << SWITCH_PIN)) == 0) {
               reset_traffic_states();
               while ((GPIOA->IDR & (1 << SWITCH_PIN)) == 0); // wait release
               delay_ms(20);
           }
       }
               // Sensor 1
               Trigger_Pulse(TRIG_PIN_1);
               uint32_t pulse_1 = Measure_Echo_Pulse(ECHO_PIN_1, TIM2);
               if (pulse_1 && pulse_1 < DISTANCE_THRESHOLD)
                   sensor_1=1;
               else
                        sensor_1=0;
               T_Delay_us(10000);
 
               // Sensor 2
               Trigger_Pulse(TRIG_PIN_2);
               uint32_t pulse_2 = Measure_Echo_Pulse(ECHO_PIN_2, TIM3);
               if (pulse_2 && pulse_2 < DISTANCE_THRESHOLD)
                        sensor_2=1;
               else
                        sensor_2=0;
               T_Delay_us(10000);
 
               // Sensor 3
               Trigger_Pulse(TRIG_PIN_3);
               uint32_t pulse_3 = Measure_Echo_Pulse(ECHO_PIN_3, TIM4);
               if (pulse_3 && pulse_3 < DISTANCE_THRESHOLD)
                        sensor_3=1;
               else
                        sensor_3=0;;
               T_Delay_us(10000);
 
               // Sensor 4
               Trigger_Pulse(TRIG_PIN_4);
               uint32_t pulse_4 = Measure_Echo_Pulse(ECHO_PIN_4, TIM5);
               if (pulse_4 && pulse_4 < DISTANCE_THRESHOLD)
                        sensor_4=1;
               else
                        sensor_4=0;
               T_Delay_us(10000);  // End of cycle
 
 
               // Update traffic signal logic
               update_trafficA();
               update_trafficB();
               delay_ms(150);  // 1 second timer step
 
 
               if (cycle_complete) {
                   cycle_complete = false;
 
                   // Count vehicles
                   int vehicle_lane_1 = sensor_1 + sensor_2;
                   int vehicle_lane_2 = sensor_3 + sensor_4;
                    diff = vehicle_lane_1 - vehicle_lane_2;
 
                   // Default green times
                   greenA = 5;
                   greenB = 5;
 
                   if (diff == 1) {
                       greenA = 7;
                   } else if (diff == 2) {
                       greenA = 9;
                   } else if (diff == -1) {
                       greenB = 7;
                   } else if (diff == -2) {
                       greenB = 9;
                   }
 
                   // Red = green + yellow of opposite
                   redA = greenB + yellowB;
                   redB = greenA + yellowA;
 
                   // Reset timers and states
                   stateA = 0;  timerA = greenA;
                   stateB = 2;  timerB = redB;
               }
 
}
}
 
